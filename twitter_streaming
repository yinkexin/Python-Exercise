import time
import sys
import string
from tweepy import Stream
from tweepy import API
from tweepy import OAuthHandler
from tweepy.streaming import StreamListener


#Custom StreamListener for streaming Twitter data.
class CustomListener(StreamListener):

#Generate file named "stream_%s.json".
    def __init__(self, fname):
        safe_fname = format_filename(fname)
        self.outfile = "stream_%s.jsonl" % safe_fname

#Write data into the file.      
    def on_data(self, data):
        try:
            with open(self.outfile, 'a') as f:
                f.write(data)
                return True
        except BaseException as e:
            sys.stderr.write("Error on_data: {}\n".format(e))
            time.sleep(5)
        return True
    """"""

    def on_error(self, status):
        if status == 420:
            sys.stderr.write("Rate limit exceeded\n".format(status))
            return False
        else:
            sys.stderr.write("Error {}\n".format(status))
            return True

def format_filename(fname):
    """Convert fname into a safe string for a file name.

    Return: string
    """
    return ''.join(convert_valid(one_char) for one_char in fname)



def convert_valid(one_char):
    """Convert a character into '_' if "invalid".

    Return: string
    """
    valid_chars = "-_.%s%s" % (string.ascii_letters, string.digits)
    if one_char in valid_chars:
        return one_char
    else:
        return '_'

#Define Key and Secret according to the Twitter Application you applied
ACCESS_TOKEN = '788202738777722880-DkBAT1PO7ySjBE3g6Q5szP2TKlrRks3'
ACCESS_SECRET = '0DViWxIASjwBCORuKb9iiOBswuP7v8Z66NpodCxgTGdt7'
CONSUMER_KEY = 'dgaq5MKy8mObHM69t3rjOhjo3'
CONSUMER_SECRET = 'kG6U2EIqBI2GfChEqfsxg1KJivW9zI4eeEDqEPDVYcJF5XU3Hg'

auth = OAuthHandler(CONSUMER_KEY, CONSUMER_SECRET)
auth.set_access_token(ACCESS_TOKEN, ACCESS_SECRET)


if __name__ == '__main__':
    query = sys.argv[1:] # list of keywords input from terminal
    query_fname = ' '.join(query) # string
    twitter_stream = Stream(auth, CustomListener(query_fname))
    twitter_stream.filter(track=query, async=True)
